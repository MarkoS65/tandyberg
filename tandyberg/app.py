import logging, signal, sys
from PyQt5.QtWidgets import QMainWindow, QApplication

from tandyberg.controller import Controller
from tandyberg.tandylayout import Ui_MainWindow

logging.basicConfig(level=logging.DEBUG)

class App(QMainWindow):
    """Main application class, is a Qt app"""
    def __init__(self):
        super().__init__()

        # TODO: redo this so that we can handle connection failure and let the user try
        # again to connect to a different device. connect method should probably have a
        # way of "testing" the connection to see if it's a real camera. Then we could even
        # autodetect in single-camera cases by using the first "good" COM port.
        self.controller = Controller()
        self.controller.connect('COM5')

        # Load up the main window layout, which is autogenerated from Qt Designer then pyuic5
        self.layout = Ui_MainWindow()
        self.layout.setupUi(self)

        # Hook up functionality to the window. This is very verbose and a future improvement
        # might be to get Qt Designer to generate this stuff (I *think* that's possible)
        # ZOOM
        self.layout.telebutton.pressed.connect(self.controller.getZoomFunc('in'))
        self.layout.telebutton.released.connect(self.controller.stopZoom)
        self.layout.widebutton.pressed.connect(self.controller.getZoomFunc('out'))
        self.layout.widebutton.released.connect(self.controller.stopZoom)
        # SLEW
        self.layout.leftbutton.pressed.connect(self.controller.getSteerFunc('left'))
        self.layout.leftbutton.released.connect(self.controller.stopSteer)
        self.layout.rightbutton.pressed.connect(self.controller.getSteerFunc('right'))
        self.layout.rightbutton.released.connect(self.controller.stopSteer)
        self.layout.upbutton.pressed.connect(self.controller.getSteerFunc('up'))
        self.layout.upbutton.released.connect(self.controller.stopSteer)
        self.layout.downbutton.pressed.connect(self.controller.getSteerFunc('down'))
        self.layout.downbutton.released.connect(self.controller.stopSteer)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    ex = App()
    ex.show()
    sys.exit(app.exec_())
